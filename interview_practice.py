#!/usr/bin/env/python3

import os, sys, distutils, re
import random

## Problem 1
## Given: A DNA string ss of length at most 1000 nt.
## Return: Four integers (separated by spaces) counting the respective number of times that the symbols 'A', 'C', 'G', and 'T' occur in ss.
def charfreq(s):
	A,C,G,T = 0,0,0,0
	for i in s:
		if(i == 'A'): A += 1
		if(i == 'C'): C += 1
		if(i == 'G'): G += 1
		if(i == 'T'): T += 1
	
	print(A,C,G,T)
	
## Problem 2
## An RNA string is a string formed from the alphabet containing 'A', 'C', 'G', and 'U'.
## Given a DNA string tt corresponding to a coding strand, its transcribed RNA string uu is formed by replacing all occurrences of 'T' in tt with 'U' in uu.
## Given: A DNA string tt having length at most 1000 nt.
## Return: The transcribed RNA string of tt.
def dna2rna(s):
#	newstring = ''
		## or we can use the s.replace('T','U')
#	for i in s:
#		if(i == 'T'): 
#			newstring = newstring + 'U'
#		else:
#			newstring = newstring + i
	
	print(s.replace('T','U'))
			
## Problem 3:
## The Fibonacci numbers 0,1,1,2,3,5,8,13,21,34,…0,1,1,2,3,5,8,13,21,34,… are generated by the following simple rule
## Fn=⎧⎩⎨⎪⎪Fn−1+Fn−2,1,0,n>1,n=1,n=0.
## Fn={Fn−1+Fn−2,n>1,1,n=1,0,n=0.
## Given: A positive integer n≤25n≤25.
## Return: The value of FnFn.
def fibo(n):
	f = 0
	
	if n == 0:
		return 0
	elif n == 1:
		return 1
	else:
		f = fibo(n-2) + fibo(n-1)
		return f


## Problem 4:
## calculate the factorial of a number n
def fact(n):
	
	if n == 1:
		return 1
	else:
		t = n * fact(n-1)
		return t 



## Problem 5:
## generate a random string of length k with ACGT
def rs(k):
	s = ''
	
	#for i in range(0,k):
	#	a = {1:'A', 2:'C', 3:'G', 4:'T'}
	#	s = s + a[random.randint(1,4)]
	for i in range(0,k):
		s = s + random.choice('ACGT')
	
	return s

## Problem 6:
## Print all possible strings of length k that can be formed from a set of n characters
# 1. String
# 2. Starting index of the string
# 3. Ending index of the string.
def permute(s, l, k):
    if l==k:
        print(''.join(s))
    else:
        for i in range(l,k+1):
            s[l], s[i] = s[i], s[l]
            permute(s, l+1, k)
            s[l], s[i] = s[i], s[l] # backtrack

	
## Problem 7
#	()   good
#( ) ( ) ( ( ) )    good 			(1 + 2) ( 3 - 4) ( ( 5 - 7) * 8 )
#) (    bad
#( ( ) ) ) bad
#
#())	False
#
#Write a function that takes as input a string of parentheses
#And returns true if it’s good, false if it’s bad

def p(s):
	temp = []
	
	for i in s:
		if i == '(':
			temp.append(i)
		elif i == ')':
			try: 
				temp.pop()
			except:
				return False
	if temp:
		return False

	return True
	
## Problem 8
# write a function that computes the reverse and complementary of a DNA sequence
def rc(s):
	new_s = ''
	rc = {'A':'T', 'C':'G', 'G':'C', 'T':'A',
				'a':'t', 'c':'g', 'g':'c', 't':'a'}
	
	for i in s:
		try:
			new_s = new_s + rc[i]
		except:
			new_s = new_s + i
			print('there is a non-ACGT character in DNA seq:' + i)
	
	print(new_s[::-1])
		
	

if __name__ == '__main__':
	
	## Problem 1
	#s = 'GCCAAACTGTCAACTGTAGCACAAGTGCGTGTCGTGACGGCGAGCATTGCAGGTAATATGTCGCATTCTGAACATGCTCTTGAAAGCCCTGAACAGTGGTTAATATGAAAAGCCTTTACCAGATTTTGGACCACGTTTAGCAGATATAGCGAGATTTGTACTCGGGGCCAGAGAACTTGCAATCTTTCTTTCAAGTCGTCAATGGCGCAATCAGCCTCAAAGACTCCGCGACCGGACACGAAGGAGATGATAACTTCTCCTATACTTACGGAGCTGCTCCTCGGTGTGGAACATTACTCTAACGCGCCTCGTACGAGGGTTCACTGGATCTAAAATCGCCGAAGATTATCTCCTGAGGTGAAAATTGAGCTAGATACGGCAAAACCTCGCCACGCGGTTACCGCGTATCCGATTCGCCAGACGCCCGGCGACGAATCTATGAATCCGTGTCTCAACTCACTAGGGACCCGCCGCGATCACTTAGTGTATTAGCTTAGACGACTGCATTGGATACTGGATTTCGAAGTGATGCAACAGCGCATCGGGTCCGTGCTTTATAGACAGCGTAGGGTAATCATTGGCCGGTCCAAAGCAACTAGTGGGATATCAACGTCGTATTCGGCAACCCCGTTATACACATTCGAACGTATCCGTGTACTACTACTTGAAGATCCTGCGCGTAAGTACGCAGACAGCGCGGGGGAACAAAGAGGATCCTCCGGTGCTATCGCGGTCCCATAGGGACGGCCACGATAGAGGAGGGGATACGGGACAAACAACCAGATCACCAAACACGCCTTTGGGAATCTTCATAAAATATACCTGCTAATTCCCTTAATGGTATGTGTCTCGCGGAGACCGATTGTGCCAACACAGATCCGT'
	#charfreq(s)
	
	## Problem 2
	#t = 'TTTT'
	#dna2rna(t)
	
	## Problem 3
	#n = 24
	#print(fibo(n))
	
	## Problem 4
	#n = 3
	#print(fact(n))
	
	## Problem 5
	#random.seed(4)
	#print(rs(4))
	
	## Problem 6
#	random.seed(6)
#	k = 5
#	s = rs(k)
#	print(s)
#	print(k)
#	permute(list(s), 0, k-1)
	
	## Problem 7
	#print(p('((())'))
	
	## Problem 8
	rc('GGGGaaaaaaaatttatatzt')


	